  [36m @usage [0;20;39m __menu [--prompt=msg] [ [list-item] [list-item] ... ] &| [-k [list-item] [list-item] ...]
  
  [36m @output [0;20;39m true
  
  [36m @vars [0;20;39m
  $_menu_sel_index
  $_menu_sel_value
  
  
  [36m @description [0;20;39m
  Each parameter is considered a list item in the order in which they are passed.
  The script stores each parameter and outputs each element as a selectable item
  in a menu. By default, a numeric-based list is generated for each list-item.
  If you require a second list that has user-specified indexes (non-numeric), you
  can pass them using the following format (note the -k option):
  
  __menu -k ":key1:list item description" ":key2:list item description ..."
  
  Each index must be contained within colons. The leading colon is used when parsing
  parameters, and to ensure the desired index is what will appear in the menu. If this
  leading colon isn't provided, the extra-list may get interpreted as the menu prompt!
  
  The message for selecting a menu item can be passed as a parameter as well using
  the syntax described below.
  
  
  [36m @options [0;20;39m
  --prompt=msg	Change the default promp to msg. Be sure to enclose msg in double quotes.
  -k          	Begin the list of key-defined list items. These must come AFTER any
  numeric-based list items, if included.
  
  
  [36m @notes [0;20;39m
  - If you wish to pass an array as a parameter, be sure to enclose the variable name
  in double quotes! Otherwise, the contents will not get expanded!
  - User-specified indexes using the colon-based format are displayed below any numeric-
  based list.
  - Formatting allows for all keys to be at most 3 characters long.
  - For custom prompts, do NOT include a trailing colon. It is added automatically.
  
  
  [36m @examples [0;20;39m
  list="oolah boolah boo"
  msg="this is a message"
  __menu --prompt="$msg" $list
  
  # output of __menu command (snippet) above would be
  # ...
  # 1.  oolah
  # 2.  boolah
  # 3.  boo
  # --------------------------------------------
  # this is a message:
  
  echo "You selected: ${_menu_selection}"
  
  ### ...OR we could add an extra option... ###
  
  __menu $list -k ":N:Show me something new!"
  
  ### Can be effectively used in conditional scripts as well ###
  
  if __menu $list ":N:Show me something new!"; then
  case $_menu_sel_index in
  1)
  ...
  
  ...
  # don't forget your custom option!
  N) ...;;
  
  # the only other success in this case is if the user pressed enter to abort.
  # remember __menu will output "You chose to abort."
  *)
  echo "Exiting..."; exit 0;;
  esac
  else
  echo "Sorry, your choice was not understood. Exiting..."
  exit 1
  fi
  
  
  [36m @dependencies [0;20;39m
  functions/0200.gslog.sh
  functions/0400.in_array.sh
  
  
  [36m @file [0;20;39m functions/0300.menu.sh
