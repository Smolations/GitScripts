  [36m @usage [0;20;39m __in_array <needle> <haystack>
  
  [36m @ouput [0;20;39m on error
  
  [36m @vars [0;20;39m
  $_in_array_index
  
  
  [36m @description [0;20;39m
  This function will search an array (haystack) for a given value (needle).
  It will return SUCCESS if the *exact* value is found in the array. Furthermore,
  a variable will be set and available to the calling script.
  
  The way this function parses the arguments allows for either a whitespace-
  separated list OR an array (e.g. ${myArray[@]}) surrounded with double quotes
  to be passed as the haystack and it will still function as expected.
  Essentially the first parameter is used as the needle and any additional will
  be considered "in the haystack."
  
  
  [36m @notes [0;20;39m
  - This function is meant to be used in conditionals. Do NOT test for the
  existence of the exported variable in your code. If the function returns
  true, the value will exist.
  - When viewing the examples below, keep in mind that Bash arrays are 0-based.
  
  
  [36m @examples [0;20;39m
  list="just a small list"
  arr=( "just a" "small list" )
  
  __in_array "list" $list              # returns 0 (success) and sets $_in_array_index=3.
  __in_array "list" "$list"            # returns 1 (failure). $list is now seen as
  #   a single parameter.
  __in_array "list" ${arr[@]}          # returns 1. array values spread out and are
  #   considered as a whitespace-separated list.
  __in_array "list" "${arr[@]}"        # returns 0 and sets $_in_array_index=1.
  
  # use only in conditionals thusly:
  if __in_array "small" "${arr[@]}"; then
  echo "small's index is: $_in_array_index"
  fi
  
  
  [36m @dependencies [0;20;39m
  functions/0200.gslog.sh
  
  
  [36m @file [0;20;39m functions/0400.in_array.sh
