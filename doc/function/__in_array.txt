[0;20;39m[0;20;39m[36m 	@usage [0;20;39m __in_array <needle> <haystack>
[0;20;39m[0;20;39m
[0;20;39m[0;20;39m[36m 	@ouput [0;20;39m on error
[0;20;39m[0;20;39m
[0;20;39m[0;20;39m[36m 	@vars [0;20;39m
[0;20;39m[0;20;39m	$_in_array_index
[0;20;39m[0;20;39m
[0;20;39m[0;20;39m
[0;20;39m[0;20;39m[36m 	@description [0;20;39m
[0;20;39m[0;20;39m	This function will search an array (haystack) for a given value (needle).
[0;20;39m[0;20;39m	It will return SUCCESS if the *exact* value is found in the array. Furthermore,
[0;20;39m[0;20;39m	a variable will be set and available to the calling script.
[0;20;39m[0;20;39m
[0;20;39m[0;20;39m	The way this function parses the arguments allows for either a whitespace-
[0;20;39m[0;20;39m	separated list OR an array (e.g. ${myArray[@]}) surrounded with double quotes
[0;20;39m[0;20;39m	to be passed as the haystack and it will still function as expected.
[0;20;39m[0;20;39m	Essentially the first parameter is used as the needle and any additional will
[0;20;39m[0;20;39m	be considered "in the haystack."
[0;20;39m[0;20;39m
[0;20;39m[0;20;39m
[0;20;39m[0;20;39m[36m 	@notes [0;20;39m
[0;20;39m[0;20;39m	- This function is meant to be used in conditionals. Do NOT test for the
[0;20;39m[0;20;39m	existence of the exported variable in your code. If the function returns
[0;20;39m[0;20;39m	true, the value will exist.
[0;20;39m[0;20;39m	- When viewing the examples below, keep in mind that Bash arrays are 0-based.
[0;20;39m[0;20;39m
[0;20;39m[0;20;39m
[0;20;39m[0;20;39m[36m 	@examples [0;20;39m
[0;20;39m[0;20;39m	list="just a small list"
[0;20;39m[0;20;39m	arr=( "just a" "small list" )
[0;20;39m[0;20;39m
[0;20;39m[0;20;39m	__in_array "list" $list              # returns 0 (success) and sets $_in_array_index=3.
[0;20;39m[0;20;39m	__in_array "list" "$list"            # returns 1 (failure). $list is now seen as
[0;20;39m[0;20;39m	                                     #   a single parameter.
[0;20;39m[0;20;39m	__in_array "list" ${arr[@]}          # returns 1. array values spread out and are
[0;20;39m[0;20;39m	                                     #   considered as a whitespace-separated list.
[0;20;39m[0;20;39m	__in_array "list" "${arr[@]}"        # returns 0 and sets $_in_array_index=1.
[0;20;39m[0;20;39m
[0;20;39m[0;20;39m	# use only in conditionals thusly:
[0;20;39m[0;20;39m	if __in_array "small" "${arr[@]}"; then
[0;20;39m[0;20;39m	    echo "small's index is: $_in_array_index"
[0;20;39m[0;20;39m	fi
[0;20;39m[0;20;39m
[0;20;39m[0;20;39m
[0;20;39m[0;20;39m[36m 	@dependencies [0;20;39m
[0;20;39m[0;20;39m	functions/0200.gslog.sh
[0;20;39m[0;20;39m
[0;20;39m[0;20;39m
[0;20;39m[0;20;39m[36m 	@file [0;20;39m functions/0400.in_array.sh
