## /*
#	@description
#	The purpose of this file is to set variables which contain crucial information
#	for ALL gitscripts. However, any information that needs to persist for multiple gitscripts
#	should find it's home in this file.
#	description@
#
#	@notes
#	- Do NOT edit values in this file for personal use. Instead use cfg/user.overrides.
#	See cfg/user.overrides.examples for guidance.
#	- Variables are set using the following syntax:
#
#		[ -n "$VAR_NAME" ] || VAR_NAME="value"
#
#	This syntax means that Bash will only assign the value to the variable if
#	the variable does not already exist or has an empty string as it's value.
#	- Variable names are NOT required to be strictly uppercase.
#	- Current convention requires trailing slash for all variables referencing a directory.
#	- These scripts have been developed using msysgit for Windows so many of the
#	variables below may need to be overridden, or associated flags may need to be set.
#	notes@
## */


# Git-specific environment variables we need.
# GIT_PS1_SHOWDIRTYSTATE=true
# GIT_PS1_SHOWUNTRACKEDFILES=true


# Make sure log directory exists and has the log file in it.
export gitscriptslog_path="${gitscripts_path}log/"
export gslog="${gitscriptslog_path}gslog.log"
if [ ! -d $gitscriptslog_path ]; then
	mkdir $gitscriptslog_path
fi
touch $gslog



# Git for Windows/mysysGit have a different confirguration and setup than Git has
# on Unix. Therefore, some functionality will simply be restricted/accessible based
# on OS.
#
# Both GfW and msysGit mount their home directories on / . If we find a windows path
# (e.g. C:\...) being mounted at / we know the OS is Windows.
export WINDOWS=false
export UNIX=false
winGitpath=$(mount | awk -f "${gitscripts_path}awk/findgit.awk")
if [ -n "${winGitpath}" ]; then
	# Windows
	export WINDOWS=true
	export GIT_INSTALL="${winGitpath}/"
	export GIT_BIN="${GIT_INSTALL}bin/"
	export GIT_ETC="${GIT_INSTALL}etc/"
	export GIT_EXEC="${GIT_BIN}/git.exe"

	# a custom message of the day that replaces the one that comes with Git.
	# this custom motd replaces Git's unless the $replace_motd variable is set
	# to anything other than an empty string in user.overrides.
	[ -n "$native_motd_path" ] || export native_motd_path="${GIT_ETC}motd"
	[ -n "$gitscripts_motd_path" ] || export gitscripts_motd_path="${gitscripts_path}motd"
else
	# Unix
	export UNIX=true
	export GIT_ETC="useless for linux"
	export GIT_EXEC="${GIT_INSTALL}"
fi

# allow new scripts to access functions easily
export loadfuncs="source ${gitscripts_path}gsfunctions.sh"

# default answer to the "clear screen" question
[ -n "$clearscreenanswer" ] || export clearscreenanswer="n"

# default flags for flagged_actions.cfg. see file for descriptions.
[ -n "${REPLACE_MOTD}" ] || export REPLACE_MOTD=true
[ -n "${USE_GS_PROMPT}" ] || export USE_GS_PROMPT=true
[ -n "${IMPORT_BASHMARKS}" ] || export IMPORT_BASHMARKS=true
[ -n "${IMPORT_GIT_ALIASES}" ] || export IMPORT_GIT_ALIASES=true
