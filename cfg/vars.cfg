## /* @config
#   @description
#   The purpose of this file is to set variables which contain crucial information
#   for ALL gitscripts. However, any information that needs to persist for multiple gitscripts
#   should find it's home in this file.
#   description@
#
#   @notes
#   - Do NOT edit values in this file for personal use. Instead use cfg/user.overrides.
#   See cfg/user.overrides.examples for guidance.
#   - Variables are set using the following syntax:
#
#       [ -n "$VAR_NAME" ] || VAR_NAME="value"
#
#   This syntax means that Bash will only assign the value to the variable if
#   the variable does not already exist or has an empty string as it's value.
#   - Variable names are NOT required to be strictly uppercase.
#   - Current convention requires trailing slash for all variables referencing a directory.
#   - These scripts have been developed using msysgit for Windows so many of the
#   variables below may need to be overridden, or associated flags may need to be set.
#   notes@
#
#   @file cfg/vars.cfg
## */


# We use awk as well as grep, and keep awk scripts in their own directory.
export GITHUG_AWK_PATH="${GITHUG_PATH}/awk"
export GITHUG_TMP_PATH="${GITHUG_PATH}/tmp"

# temp folder might not exist since it's contents are not tracked
[ ! -d "$GITHUG_TMP_PATH" ] && mkdir "$GITHUG_TMP_PATH"



# default answers to questions often encountered across scripts. these should be lowercase and
# either 'y' or 'n'.
[ -n "$pushanswer" ]              || export pushanswer="y"
[ -n "$checkoutforbranchanswer" ] || export checkoutforbranchanswer="y"

# default flags for flagged_actions.cfg. see file for descriptions.
[ -n "${GITHUG_USE_PROMPT}" ]          || export GITHUG_USE_PROMPT=true
[ -n "${GITHUG_IMPORT_GIT_ALIASES}" ]  || export GITHUG_IMPORT_GIT_ALIASES=true

# variables built into Git
[ -n "${GIT_MERGE_AUTOEDIT}" ]  || export GIT_MERGE_AUTOEDIT=no

# other default booleans
[ -n "$showremotestate" ]       || export showremotestate="n"
[ -n "$autopushnewbranch" ]     || export autopushnewbranch=false

