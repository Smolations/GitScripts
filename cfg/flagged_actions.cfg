## /*
#	@description
#	There are some default behaviors/stylings that we have chosen for GitScripts.
#	We realize that some users have already set some of these "preferences" and
#	would like to keep them. Every flagged action you see in this file occurs
#	by default. If you wish to change the default behavior, you need to set the
#	appropriate flag in your user.overrides. By "set" we mean to say "define
#	the variable and set it to something other than an empty string."
#	description@
#
#	@notes
#	-
#	notes@
#
#	@examples
#	The example(s) below assume the file you are editing is cfg/user.overrides
#	1) export keep_git_motd="true"
#		- flag has been SET. motd will not be replaced
#	2) export keep_git_motd="yes please"
#		- flag has been SET. motd will not be replaced
#	3) export keep_default_prompt=""
#		- flag is still considered UNSET since it's value is an empty string.
#		your prompt will be replaced by GitScripts prompt!
#	examples@
#
#	@dependencies
#	${gitscripts_path}bashmarks.sh*
#	${gitscripts_path}git_aliases.sh*
#
#	*if flag has not been set
#	dependencies@
## */


# set this flag to replace to keep the original Git motd
if [ -z "${keep_git_motd}" ]; then
	cp "${gitscripts_motd_path}" "${native_motd_path}"
fi



# set this flag to keep your own command prompt (PS1) definition
if [ -z "${keep_default_prompt}" ]; then
	#bring in necessary functions
	$loadfuncs
	PS1='
${STYLE_PROMPT_USER}\u@\h${X} ${STYLE_PROMPT_DATE}\d \t${X} ${STYLE_PROMPT_PATH}\w${COL_NORM}
${STYLE_PROMPT_BRANCH} $(__parse_git_branch) ${X}$(__parse_git_branch_state)${X}
$ '
fi



# set this flag to exclude bashmarks functionality.
if [ -z "${exclude_bashmarks}" ]; then
	source "${gitscripts_path}bashmarks.sh"
fi

# set this flag to exclude GitScripts basic Git command aliases. see file for definitions.
if [ -z "${exclude_git_aliases}" ]; then
	source "${gitscripts_path}git_aliases.sh"
fi

# set this flag to
#if [ -z "${}" ]; then

#fi